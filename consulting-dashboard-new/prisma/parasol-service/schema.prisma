// Parasol Domain Language Service Schema
// Purpose: パラソルドメイン言語定義とビジネスオペレーションの管理

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/parasol-client"
}

datasource db {
  provider = "sqlite"
  url      = env("PARASOL_DATABASE_URL")
}

// サービス定義
model Service {
  id                    String                  @id @default(cuid())
  name                  String                  @unique // サービス識別子（例: projectService）
  displayName           String                  // 表示名（例: プロジェクト管理）
  description           String?                 // サービスの説明
  
  // MD形式の定義（新方式）
  serviceDescription    String?                 // MD形式のサービス説明
  domainLanguageDefinition String?              // MD形式のドメイン言語定義
  apiSpecificationDefinition String?            // MD形式のAPI仕様
  databaseDesignDefinition String?              // MD形式のDB設計
  integrationSpecificationDefinition String?   // MD形式の統合仕様
  
  // JSON形式の定義（旧方式、後で廃止予定）
  domainLanguage        String                  // パラソルドメイン言語定義（JSON）
  apiSpecification      String                  // API仕様（OpenAPI形式 JSON）
  dbSchema              String                  // データベース設計（JSON）
  
  capabilities          BusinessCapability[]    // ビジネスケーパビリティ
  businessOperations    BusinessOperation[]     // ビジネスオペレーション

  // 新しいドキュメント管理（リレーション）
  domainLanguageDoc     DomainLanguage?         // ドメイン言語ドキュメント
  apiSpecificationDoc   ApiSpecification?       // API仕様ドキュメント
  databaseDesignDoc     DatabaseDesign?         // DB設計ドキュメント
  integrationSpecDoc    IntegrationSpecification? // 統合仕様ドキュメント

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("services")
}

// ビジネスケーパビリティ定義
model BusinessCapability {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 所属サービス
  service               Service                 @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name                  String                  // ケーパビリティ名（英語）
  displayName           String                  // 表示名（日本語）
  description           String?                 // 説明
  definition            String?                 // MD形式のケーパビリティ定義
  category              String                  // カテゴリ（Core, Supporting, Generic）
  businessOperations    BusinessOperation[]     // 関連するビジネスオペレーション
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@unique([serviceId, name])
  @@map("business_capabilities")
}

// ビジネスオペレーション定義
model BusinessOperation {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 所属サービス
  service               Service                 @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  capabilityId          String?                 // 所属ケーパビリティ
  capability            BusinessCapability?     @relation(fields: [capabilityId], references: [id], onDelete: SetNull)
  name                  String                  // オペレーション名
  displayName           String                  // 表示名
  design                String?                 // MD形式のビジネスオペレーション設計
  pattern               String                  // パターン（CRUD, Workflow, Analytics, Communication, Administration）
  goal                  String                  // ビジネスゴール
  roles                 String                  // 関連ロール（JSON配列）
  operations            String                  // オペレーション詳細（JSON）
  businessStates        String                  // ビジネス状態（JSON）
  useCases              String                  // ユースケース（JSON）
  uiDefinitions         String                  // UI定義（JSON）
  testCases             String                  // テストケース（JSON）
  robustnessModel       String?                 // ロバストネス図（JSON）
  useCaseModels         UseCase[]               // ユースケースモデル（リレーション）
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@unique([serviceId, name])
  @@map("business_operations")
}

// ドメインエンティティ
model DomainEntity {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 所属サービス
  name                  String                  // エンティティ名（英語）
  displayName           String                  // 表示名（日本語）
  description           String?                 // 説明
  isAggregate           Boolean                 @default(false) // 集約ルートかどうか
  properties            String                  // プロパティ定義（JSON）
  businessRules         String?                 // ビジネスルール（JSON）
  domainEvents          String?                 // ドメインイベント（JSON）
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@unique([serviceId, name])
  @@map("domain_entities")
}

// 値オブジェクト
model ValueObject {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 所属サービス
  name                  String                  // 値オブジェクト名（英語）
  displayName           String                  // 表示名（日本語）
  description           String?                 // 説明
  properties            String                  // プロパティ定義（JSON）
  validationRules       String                  // バリデーションルール（JSON）
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@unique([serviceId, name])
  @@map("value_objects")
}

// ドメインサービス
model DomainService {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 所属サービス
  name                  String                  // ドメインサービス名（英語）
  displayName           String                  // 表示名（日本語）
  description           String?                 // 説明
  methods               String                  // メソッド定義（JSON）
  aggregates            String                  // 関連集約（JSON配列）
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  @@unique([serviceId, name])
  @@map("domain_services")
}

// インパクト分析記録
model ImpactAnalysis {
  id                    String                  @id @default(cuid())
  serviceId             String                  // 対象サービス
  analysisType          String                  // 分析タイプ（design, implementation, test）
  changedElements       String                  // 変更された要素（JSON）
  impactedAreas         String                  // 影響範囲（JSON）
  tasks                 String                  // 生成されたタスク（JSON）
  issueNumber           String?                 // GitHub Issue番号
  createdAt             DateTime                @default(now())
  createdBy             String                  // 実行者
  
  @@map("impact_analyses")
}

// ユースケース定義
model UseCase {
  id              String              @id @default(cuid())
  name            String              // ユースケース名（英語）
  displayName     String              // 表示名（日本語）
  description     String?             // 説明
  definition      String?             // MD形式のユースケース定義
  operationId     String              // 所属ビジネスオペレーション
  operation       BusinessOperation   @relation(fields: [operationId], references: [id], onDelete: Cascade)
  order           Int                 @default(0) // 表示順序

  // ユースケース詳細（JSON形式、後で廃止予定）
  actors          String?             // アクター（JSON: {primary: string, secondary: string[]})
  preconditions   String?             // 事前条件（JSON配列）
  postconditions  String?             // 事後条件（JSON配列）
  basicFlow       String?             // 基本フロー（JSON配列）
  alternativeFlow String?             // 代替フロー（JSON配列）
  exceptionFlow   String?             // 例外フロー（JSON配列）

  // 関連定義
  robustnessDiagram RobustnessDiagram? // ロバストネス図（1対1、NEW）
  pageDefinitions PageDefinition[]    // ページ定義
  testDefinitions TestDefinition[]    // テスト定義

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([operationId, name])
  @@map("use_cases")
}

// ロバストネス図定義（NEW - Issue #116）
model RobustnessDiagram {
  id                String   @id @default(cuid())
  useCaseId         String   @unique              // 所属ユースケース（1対1）
  useCase           UseCase  @relation(fields: [useCaseId], references: [id], onDelete: Cascade)

  content           String                        // MD形式の全文（robustness.md）

  // パース済みデータ（JSON形式）
  boundaryObjects   String?                       // Boundary Objects（JSON配列）
  controlObjects    String?                       // Control Objects（JSON配列）
  entityObjects     String?                       // Entity Objects（JSON配列）
  diagram           String?                       // Mermaidダイアグラムコード
  interactions      String?                       // 相互作用シーケンス（JSON配列）

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("robustness_diagrams")
}

// ページ定義
model PageDefinition {
  id              String              @id @default(cuid())
  name            String              // ページ名（英語）
  displayName     String              // 表示名（日本語）
  description     String?             // 説明
  useCaseId       String              // 所属ユースケース
  useCase         UseCase             @relation(fields: [useCaseId], references: [id], onDelete: Cascade)

  // MD形式のページ定義内容（NEW - Issue #131）
  content         String?             // MD形式の全文（page.md）

  // ページ詳細（旧方式、後で廃止予定）
  url             String              // URL
  layout          String?             // レイアウト定義（JSON）
  components      String?             // コンポーネント構成（JSON）
  stateManagement String?             // 状態管理（JSON）
  validations     String?             // バリデーション（JSON）

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([useCaseId, name])
  @@map("page_definitions")
}

// テスト定義
model TestDefinition {
  id              String              @id @default(cuid())
  name            String              // テスト名（英語）
  displayName     String              // 表示名（日本語）
  description     String?             // 説明
  useCaseId       String              // 所属ユースケース
  useCase         UseCase             @relation(fields: [useCaseId], references: [id], onDelete: Cascade)

  // MD形式のテスト定義内容（NEW - Issue #131）
  content         String?             // MD形式の全文（test.md）

  // テスト詳細（旧方式、後で廃止予定）
  testType        String              // テストタイプ（unit, integration, e2e）
  testCases       String?             // テストケース（JSON配列）
  expectedResults String?             // 期待結果（JSON）
  testData        String?             // テストデータ（JSON）

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("test_definitions")
}

// ============================================================
// ドキュメント管理モデル（Issue #103）
// ============================================================

// パラソルドメイン言語ドキュメント
model DomainLanguage {
  id              String   @id @default(cuid())
  serviceId       String   @unique                  // 所属サービス（1対1）
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  version         String                             // バージョン（例: v1.0.0）
  content         String                             // MD形式の全文

  // パース済みデータ（JSON形式）
  entities        String?                            // パース済みエンティティ
  valueObjects    String?                            // パース済み値オブジェクト
  aggregates      String?                            // パース済み集約
  domainServices  String?                            // パース済みドメインサービス
  domainEvents    String?                            // パース済みドメインイベント
  businessRules   String?                            // パース済みビジネスルール

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("domain_languages")
}

// API仕様ドキュメント
model ApiSpecification {
  id              String   @id @default(cuid())
  serviceId       String   @unique                  // 所属サービス（1対1）
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  version         String                             // バージョン（例: v1.0.0）
  baseUrl         String                             // ベースURL
  authMethod      String                             // 認証方式（JWT/OAuth2/APIKey）
  content         String                             // MD形式の全文

  // パース済みデータ（JSON形式）
  endpoints       String?                            // パース済みエンドポイント
  errorCodes      String?                            // パース済みエラーコード
  rateLimits      String?                            // パース済みレート制限
  securitySchemes String?                            // パース済みセキュリティスキーム

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("api_specifications")
}

// データベース設計ドキュメント
model DatabaseDesign {
  id              String   @id @default(cuid())
  serviceId       String   @unique                  // 所属サービス（1対1）
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  dbms            String                             // DBMS（PostgreSQL/MySQL/SQLite）
  content         String                             // MD形式の全文

  // パース済みデータ（JSON形式）
  tables          String?                            // パース済みテーブル定義
  erDiagram       String?                            // Mermaid ERD
  indexes         String?                            // パース済みインデックス定義
  constraints     String?                            // パース済み制約定義

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("database_designs")
}

// 統合仕様ドキュメント
model IntegrationSpecification {
  id              String   @id @default(cuid())
  serviceId       String   @unique                  // 所属サービス（1対1）
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  content         String                             // MD形式の全文

  // パース済みデータ（JSON形式）
  dependencies    String?                            // 依存サービス
  providedEvents  String?                            // 提供するドメインイベント
  consumedEvents  String?                            // 購読するドメインイベント
  syncApis        String?                            // 同期API呼び出し
  asyncPatterns   String?                            // 非同期パターン

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("integration_specifications")
}