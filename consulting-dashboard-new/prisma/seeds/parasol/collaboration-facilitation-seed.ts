import { PrismaClient as ParasolPrismaClient } from '@prisma/parasol-client'

const parasolDb = new ParasolPrismaClient()

// コラボレーション促進サービスのケーパビリティとビジネスオペレーション定義
export const collaborationFacilitationData = {
  capabilities: [
    {
      name: 'notification-delivery',
      displayName: '通知を確実に届ける能力',
      description: '重要な情報やイベントを適切なタイミングで関係者に通知し、迅速な対応を促す能力',
      category: 'Core',
      definition: `# ビジネスケーパビリティ: 通知を確実に届ける能力

## ケーパビリティ概要
システムイベントや重要な変更を、適切なチャネルを通じて関係者にリアルタイムで通知する能力

## ビジネス価値
- **即時性**: リアルタイムな情報伝達
- **確実性**: 通知の到達保証
- **効率性**: 情報収集時間の削減

## 実現する成果
- 通知到達率: 99.9%以上
- 平均配信時間: 1秒以内
- 既読率: 90%以上（重要通知）
- 通知疲れ防止: 適切な頻度管理

## 必要な要素
### 人材・スキル
- 通知システム設計者
- UXデザイナー（通知体験）
- システム運用エンジニア

### プロセス・方法論
- 通知優先度設計
- チャネル選択ロジック
- 配信タイミング最適化

### ツール・システム
- 通知配信プラットフォーム
- メッセージキューシステム
- 配信追跡システム`,
      businessOperations: [
        {
          name: 'notification-routing',
          displayName: '通知をルーティングする',
          pattern: 'Workflow',
          goal: '最適なチャネルでの通知配信',
          design: `# ビジネスオペレーション: 通知をルーティングする

## 目的
通知の種類と受信者の設定に基づき、最適なチャネルを選択して確実に配信する

## 関係者とロール
- **システム**: イベント発生源
- **通知エンジン**: ルーティング処理
- **受信者**: 通知の受け取り
- **管理者**: ルール設定・管理

## ビジネスオペレーション
1. **イベント検知**: システムイベントの発生
2. **受信者特定**: 通知対象者の判定
3. **優先度判定**: 緊急度・重要度の評価
4. **チャネル選択**: メール、アプリ、SMS等
5. **配信実行**: 選択チャネルへの送信
6. **配信確認**: 到達・既読の追跡

## 状態遷移
発生 → ルーティング中 → 配信中 → 配信済み → 既読

## KPI
- ルーティング時間: 100ms以内
- 配信成功率: 99.9%
- チャネル最適化率: 85%以上`,
          roles: ['システム', '通知エンジン', '受信者', '管理者'],
          operations: {
            steps: [
              'イベント検知',
              '受信者特定',
              '優先度判定',
              'チャネル選択',
              '配信実行',
              '配信確認'
            ]
          },
          businessStates: {
            initial: '発生',
            states: ['発生', 'ルーティング中', '配信中', '配信済み', '既読'],
            final: '既読'
          }
        },
        {
          name: 'notification-preferences',
          displayName: '通知設定を管理する',
          pattern: 'CRUD',
          goal: 'ユーザー個別の通知体験最適化',
          design: `# ビジネスオペレーション: 通知設定を管理する

## 目的
ユーザーが自身の通知受信方法を柔軟に設定し、最適な情報受信体験を実現する

## 関係者とロール
- **ユーザー**: 通知設定の変更
- **システム管理者**: デフォルト設定
- **UXデザイナー**: 設定UI設計
- **サポート**: 設定支援

## ビジネスオペレーション
1. **設定画面表示**: 現在の設定確認
2. **カテゴリ選択**: 通知種別の選択
3. **チャネル設定**: 受信方法の指定
4. **頻度設定**: まとめ送信等の設定
5. **時間帯設定**: 受信可能時間帯
6. **保存・適用**: 設定の反映

## KPI
- 設定カスタマイズ率: 60%以上
- 設定満足度: 4.0以上
- 通知オフ率: 20%以下`,
          roles: ['ユーザー', 'システム管理者', 'UXデザイナー', 'サポート'],
          operations: {
            steps: [
              '設定画面表示',
              'カテゴリ選択',
              'チャネル設定',
              '頻度設定',
              '時間帯設定',
              '保存・適用'
            ]
          },
          businessStates: {
            initial: 'デフォルト',
            states: ['デフォルト', '編集中', '保存中', 'カスタマイズ済み'],
            final: 'カスタマイズ済み'
          }
        },
        {
          name: 'notification-analytics',
          displayName: '通知効果を分析する',
          pattern: 'Analytics',
          goal: '通知の効果測定と最適化',
          design: `# ビジネスオペレーション: 通知効果を分析する

## 目的
通知の配信状況と反応を分析し、より効果的な通知戦略を立案する

## 関係者とロール
- **分析担当者**: データ分析実施
- **プロダクトマネージャー**: 改善施策立案
- **エンジニア**: システム改善
- **経営層**: 戦略決定

## ビジネスオペレーション
1. **データ収集**: 配信・既読・アクション
2. **基礎分析**: 到達率、開封率、CTR
3. **セグメント分析**: ユーザー属性別
4. **パターン分析**: 時間帯、頻度の影響
5. **改善提案**: 最適化施策
6. **A/Bテスト**: 施策の効果検証

## KPI
- 分析頻度: 週次
- 改善提案数: 月3件以上
- 施策成功率: 70%以上`,
          roles: ['分析担当者', 'プロダクトマネージャー', 'エンジニア', '経営層'],
          operations: {
            steps: [
              'データ収集',
              '基礎分析',
              'セグメント分析',
              'パターン分析',
              '改善提案',
              'A/Bテスト'
            ]
          },
          businessStates: {
            initial: '収集中',
            states: ['収集中', '分析中', '提案作成中', 'テスト中'],
            final: 'テスト中'
          }
        }
      ]
    },
    {
      name: 'communication-channels',
      displayName: 'コミュニケーションチャネルを管理する能力',
      description: 'プロジェクトやチーム単位のコミュニケーションスペースを提供し、効果的な情報共有を実現する能力',
      category: 'Core',
      definition: `# ビジネスケーパビリティ: コミュニケーションチャネルを管理する能力

## ケーパビリティ概要
目的別のコミュニケーションチャネルを提供し、文脈に応じた効率的な情報交換を実現する能力

## ビジネス価値
- **効率向上**: 情報の整理と検索性
- **透明性**: オープンなコミュニケーション
- **知識蓄積**: 議論の記録と活用

## 実現する成果
- チャネル活用率: 80%以上
- 情報検索時間: 50%削減
- 重要情報共有率: 100%
- コミュニケーション満足度: 4.2以上

## 必要な要素
### 人材・スキル
- コミュニティマネージャー
- 情報アーキテクト
- ファシリテーター

### プロセス・方法論
- チャネル設計手法
- 情報分類体系
- コミュニケーションルール

### ツール・システム
- チャットプラットフォーム
- ファイル共有システム
- 検索エンジン`,
      businessOperations: [
        {
          name: 'channel-creation',
          displayName: 'チャネルを作成する',
          pattern: 'CRUD',
          goal: '目的に応じたコミュニケーション空間の提供',
          design: `# ビジネスオペレーション: チャネルを作成する

## 目的
プロジェクトやトピックに応じた専用のコミュニケーションチャネルを作成し、効率的な情報交換を可能にする

## 関係者とロール
- **チャネル作成者**: チャネル企画、作成
- **チャネル管理者**: 運営ルール設定
- **参加者**: チャネル利用
- **システム管理者**: 権限管理

## ビジネスオペレーション
1. **目的定義**: チャネルの用途明確化
2. **命名規則適用**: 分かりやすい名前
3. **公開範囲設定**: パブリック/プライベート
4. **初期メンバー招待**: 関係者の追加
5. **ルール設定**: 利用ガイドライン
6. **キックオフ**: 利用開始の案内

## KPI
- チャネル作成時間: 5分以内
- 命名規則遵守率: 95%
- 初期参加率: 80%以上`,
          roles: ['チャネル作成者', 'チャネル管理者', '参加者', 'システム管理者'],
          operations: {
            steps: [
              '目的定義',
              '命名規則適用',
              '公開範囲設定',
              '初期メンバー招待',
              'ルール設定',
              'キックオフ'
            ]
          },
          businessStates: {
            initial: '企画中',
            states: ['企画中', '作成中', '設定中', 'アクティブ', 'アーカイブ'],
            final: 'アクティブ'
          }
        },
        {
          name: 'message-threading',
          displayName: 'メッセージをスレッド化する',
          pattern: 'Communication',
          goal: '文脈を保った効率的な議論',
          design: `# ビジネスオペレーション: メッセージをスレッド化する

## 目的
関連するメッセージをスレッドとして整理し、議論の文脈を保ちながら効率的なコミュニケーションを実現する

## 関係者とロール
- **投稿者**: メッセージ投稿、返信
- **参加者**: スレッド参加、反応
- **モデレーター**: 議論の整理
- **閲覧者**: 情報収集

## ビジネスオペレーション
1. **トピック投稿**: 議論の開始
2. **スレッド作成**: 返信による派生
3. **議論展開**: 意見交換
4. **要約作成**: 重要ポイント整理
5. **結論記録**: 決定事項の明記
6. **アーカイブ**: 完了した議論の保存

## KPI
- スレッド化率: 70%以上
- 平均返信時間: 2時間以内
- 議論完結率: 85%以上`,
          roles: ['投稿者', '参加者', 'モデレーター', '閲覧者'],
          operations: {
            steps: [
              'トピック投稿',
              'スレッド作成',
              '議論展開',
              '要約作成',
              '結論記録',
              'アーカイブ'
            ]
          },
          businessStates: {
            initial: '新規投稿',
            states: ['新規投稿', '議論中', '要約中', '完結', 'アーカイブ済み'],
            final: 'アーカイブ済み'
          }
        },
        {
          name: 'file-sharing',
          displayName: 'ファイルを共有する',
          pattern: 'CRUD',
          goal: 'セキュアで効率的なファイル共有',
          design: `# ビジネスオペレーション: ファイルを共有する

## 目的
チャネル内で関連ファイルを安全に共有し、必要な情報への迅速なアクセスを提供する

## 関係者とロール
- **アップロード者**: ファイル共有
- **ダウンロード者**: ファイル取得
- **ファイル管理者**: 整理、削除
- **セキュリティ管理者**: アクセス制御

## ビジネスオペレーション
1. **ファイル選択**: 共有対象の選定
2. **セキュリティチェック**: ウイルススキャン
3. **メタデータ付与**: 説明、タグ追加
4. **アップロード**: ファイル送信
5. **通知**: 関係者への共有通知
6. **バージョン管理**: 更新履歴の保持

## KPI
- アップロード成功率: 99%
- 平均アップロード時間: 30秒以内
- ファイル検索成功率: 90%以上`,
          roles: ['アップロード者', 'ダウンロード者', 'ファイル管理者', 'セキュリティ管理者'],
          operations: {
            steps: [
              'ファイル選択',
              'セキュリティチェック',
              'メタデータ付与',
              'アップロード',
              '通知',
              'バージョン管理'
            ]
          },
          businessStates: {
            initial: '選択中',
            states: ['選択中', 'スキャン中', 'アップロード中', '共有済み', '更新済み'],
            final: '共有済み'
          }
        }
      ]
    },
    {
      name: 'collaboration-insights',
      displayName: 'コラボレーションを分析する能力',
      description: 'チームのコミュニケーションパターンを分析し、より良いコラボレーションを促進する能力',
      category: 'Supporting',
      definition: `# ビジネスケーパビリティ: コラボレーションを分析する能力

## ケーパビリティ概要
コミュニケーションデータから協働パターンを分析し、チームの生産性向上につながるインサイトを提供する能力

## ビジネス価値
- **効率改善**: コミュニケーションボトルネックの解消
- **関係強化**: チーム内連携の可視化
- **文化醸成**: 望ましい協働文化の促進

## 実現する成果
- コミュニケーション効率: 30%向上
- 情報サイロ削減: 50%減
- チーム連携スコア: 4.3以上
- 改善施策成功率: 75%以上

## 必要な要素
### 人材・スキル
- データサイエンティスト
- 組織開発専門家
- ネットワーク分析専門家

### プロセス・方法論
- ソーシャルネットワーク分析
- センチメント分析
- コミュニケーションパターン分析

### ツール・システム
- 分析プラットフォーム
- 可視化ツール
- レコメンデーションエンジン`,
      businessOperations: [
        {
          name: 'network-analysis',
          displayName: 'ネットワークを分析する',
          pattern: 'Analytics',
          goal: 'チーム内の情報流通の可視化',
          design: `# ビジネスオペレーション: ネットワークを分析する

## 目的
チーム内のコミュニケーションネットワークを可視化し、情報流通の改善点を発見する

## 関係者とロール
- **分析者**: ネットワーク分析実施
- **チームリーダー**: 結果活用
- **組織開発**: 改善施策立案
- **メンバー**: フィードバック提供

## ビジネスオペレーション
1. **データ抽出**: コミュニケーションログ
2. **ネットワーク構築**: 関係性マッピング
3. **中心性分析**: キーパーソン特定
4. **クラスター分析**: サブグループ発見
5. **ボトルネック特定**: 情報流通の障害
6. **改善提案**: ネットワーク最適化

## KPI
- 分析精度: 85%以上
- キーパーソン特定率: 90%
- 改善効果: 情報伝達速度20%向上`,
          roles: ['分析者', 'チームリーダー', '組織開発', 'メンバー'],
          operations: {
            steps: [
              'データ抽出',
              'ネットワーク構築',
              '中心性分析',
              'クラスター分析',
              'ボトルネック特定',
              '改善提案'
            ]
          },
          businessStates: {
            initial: 'データ収集中',
            states: ['データ収集中', '分析中', '可視化中', '提案作成中'],
            final: '提案作成中'
          }
        },
        {
          name: 'sentiment-monitoring',
          displayName: 'センチメントをモニタリングする',
          pattern: 'Analytics',
          goal: 'チームの雰囲気と満足度の把握',
          design: `# ビジネスオペレーション: センチメントをモニタリングする

## 目的
コミュニケーション内容からチームの雰囲気や満足度を分析し、早期の課題発見と対応を可能にする

## 関係者とロール
- **分析システム**: 自動分析実行
- **HR部門**: 結果確認、対応
- **チームリーダー**: チーム改善
- **カウンセラー**: 個別サポート

## ビジネスオペレーション
1. **テキスト収集**: メッセージデータ
2. **感情分析**: ポジティブ/ネガティブ
3. **トレンド把握**: 時系列変化
4. **アラート生成**: 異常値検知
5. **原因調査**: ネガティブ要因特定
6. **介入計画**: サポート施策立案

## KPI
- 検知精度: 80%以上
- アラート適中率: 75%
- 介入成功率: 85%以上`,
          roles: ['分析システム', 'HR部門', 'チームリーダー', 'カウンセラー'],
          operations: {
            steps: [
              'テキスト収集',
              '感情分析',
              'トレンド把握',
              'アラート生成',
              '原因調査',
              '介入計画'
            ]
          },
          businessStates: {
            initial: 'モニタリング中',
            states: ['モニタリング中', 'アラート発生', '調査中', '介入中'],
            final: 'モニタリング中'
          }
        },
        {
          name: 'collaboration-recommendations',
          displayName: 'コラボレーション改善を提案する',
          pattern: 'Analytics',
          goal: 'データに基づく協働改善',
          design: `# ビジネスオペレーション: コラボレーション改善を提案する

## 目的
分析結果に基づいて具体的なコラボレーション改善策を提案し、チームの生産性を向上させる

## 関係者とロール
- **レコメンドエンジン**: 提案生成
- **プロダクトマネージャー**: 提案評価
- **チームリーダー**: 実施判断
- **チームメンバー**: 施策実行

## ビジネスオペレーション
1. **パターン認識**: 成功/失敗パターン
2. **ベンチマーク比較**: 他チームとの比較
3. **改善機会特定**: 具体的な改善点
4. **施策生成**: 実行可能な提案
5. **優先順位付け**: 効果とコストの評価
6. **実施計画**: 段階的な導入計画

## KPI
- 提案採用率: 60%以上
- 改善効果: 生産性15%向上
- 満足度向上: 0.5ポイント`,
          roles: ['レコメンドエンジン', 'プロダクトマネージャー', 'チームリーダー', 'チームメンバー'],
          operations: {
            steps: [
              'パターン認識',
              'ベンチマーク比較',
              '改善機会特定',
              '施策生成',
              '優先順位付け',
              '実施計画'
            ]
          },
          businessStates: {
            initial: '分析中',
            states: ['分析中', '提案生成中', '評価中', '実施中'],
            final: '実施中'
          }
        }
      ]
    }
  ]
}

export async function createCollaborationFacilitationData(serviceId: string) {
  console.log('  Creating Collaboration Facilitation Service capabilities and operations...')
  
  let totalCapabilities = 0
  let totalOperations = 0
  
  for (const capData of collaborationFacilitationData.capabilities) {
    // ケーパビリティの作成
    const capability = await parasolDb.businessCapability.create({
      data: {
        serviceId,
        name: capData.name,
        displayName: capData.displayName,
        description: capData.description,
        definition: capData.definition,
        category: capData.category
      }
    })
    totalCapabilities++
    console.log(`    ✓ Created capability: ${capability.displayName}`)
    
    // ビジネスオペレーションの作成
    for (const opData of capData.businessOperations) {
      const operation = await parasolDb.businessOperation.create({
        data: {
          serviceId,
          capabilityId: capability.id,
          name: opData.name,
          displayName: opData.displayName,
          design: opData.design,
          pattern: opData.pattern,
          goal: opData.goal,
          roles: JSON.stringify(opData.roles),
          operations: JSON.stringify(opData.operations),
          businessStates: JSON.stringify(opData.businessStates),
          useCases: JSON.stringify([]),
          uiDefinitions: JSON.stringify({ pages: [] }),
          testCases: JSON.stringify({ criteria: opData.goal })
        }
      })
      totalOperations++
      console.log(`      ✓ Created operation: ${operation.displayName}`)
    }
  }
  
  return { capabilities: totalCapabilities, operations: totalOperations }
}