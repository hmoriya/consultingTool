import { PrismaClient as ParasolPrismaClient } from '@prisma/parasol-client'

const parasolDb = new ParasolPrismaClient()

// セキュアアクセスサービスのケーパビリティとビジネスオペレーション定義
export const secureAccessData = {
  capabilities: [
    {
      name: 'identity-management',
      displayName: 'アイデンティティを管理する能力',
      description: 'ユーザーの身元情報を安全に管理し、信頼性の高い認証基盤を提供する能力',
      category: 'Core',
      definition: `# ビジネスケーパビリティ: アイデンティティを管理する能力

## ケーパビリティ概要
ユーザーの身元情報を一元的に管理し、セキュアな認証・認可を実現する能力

## ビジネス価値
- **セキュリティ向上**: なりすまし防止、不正アクセスの抑止
- **運用効率化**: ID管理の自動化、パスワードリセットの削減
- **コンプライアンス**: 監査証跡の完全性、規制要件への準拠

## 実現する成果
- 不正アクセス件数: ゼロ
- パスワード関連問い合わせ: 50%削減
- アカウント作成時間: 5分以内
- 監査対応時間: 1時間以内

## 必要な要素
### 人材・スキル
- アイデンティティ管理エキスパート
- セキュリティアーキテクト
- 運用エンジニア

### プロセス・方法論
- ID発行・無効化プロセス
- パスワードポリシー管理
- 多要素認証プロセス

### ツール・システム
- 統合ID管理システム
- シングルサインオン(SSO)基盤
- 多要素認証(MFA)システム`,
      businessOperations: [
        {
          name: 'user-provisioning',
          displayName: 'ユーザーアカウントを発行・管理する',
          pattern: 'Workflow',
          goal: 'セキュアで効率的なアカウント管理の実現',
          design: `# ビジネスオペレーション: ユーザーアカウントを発行・管理する

## 目的
新規ユーザーの迅速なアカウント発行と、退職者の確実な無効化により、セキュアなアクセス管理を実現する

## 関係者とロール
- **人事担当者**: 入退社情報の提供、承認
- **システム管理者**: アカウント作成、権限設定
- **セキュリティ管理者**: ポリシー適用、監査
- **ユーザー本人**: 初回パスワード設定、情報確認

## ビジネスオペレーション
1. **入社情報登録**: 人事システムから自動連携
2. **身元確認**: 本人確認書類の検証
3. **アカウント作成**: ID生成、初期パスワード発行
4. **権限設定**: 役職・部署に応じた基本権限付与
5. **通知・有効化**: メールでアカウント情報通知
6. **初回ログイン**: パスワード変更、MFA設定

## 状態遷移
申請中 → 承認待ち → アカウント作成中 → 有効 → (休止) → 無効

## KPI
- アカウント発行時間: 申請から24時間以内
- エラー率: 1%未満
- セキュリティインシデント: ゼロ`,
          roles: ['人事担当者', 'システム管理者', 'セキュリティ管理者', 'ユーザー本人'],
          operations: {
            steps: [
              '入社情報登録',
              '身元確認',
              'アカウント作成',
              '権限設定',
              '通知・有効化',
              '初回ログイン'
            ]
          },
          businessStates: {
            initial: '申請中',
            states: ['申請中', '承認待ち', 'アカウント作成中', '有効', '休止', '無効'],
            final: '無効'
          }
        },
        {
          name: 'password-management',
          displayName: 'パスワードポリシーを適用する',
          pattern: 'Administration',
          goal: 'セキュアなパスワード管理と利便性の両立',
          design: `# ビジネスオペレーション: パスワードポリシーを適用する

## 目的
組織のセキュリティ要件に準拠したパスワードポリシーを適用し、不正アクセスリスクを最小化する

## 関係者とロール
- **セキュリティ管理者**: ポリシー策定、監視
- **システム管理者**: ポリシー実装、運用
- **ユーザー**: パスワード遵守

## ビジネスオペレーション
1. **ポリシー定義**: 複雑性、有効期限、履歴管理
2. **システム設定**: 自動チェック、強制適用
3. **ユーザー通知**: ポリシー変更の周知
4. **定期更新**: パスワード更新の促進
5. **例外処理**: 特殊ケースの対応

## KPI
- ポリシー準拠率: 99%以上
- パスワード起因のインシデント: ゼロ
- 更新遅延率: 5%未満`,
          roles: ['セキュリティ管理者', 'システム管理者', 'ユーザー'],
          operations: {
            steps: [
              'ポリシー定義',
              'システム設定',
              'ユーザー通知',
              '定期更新',
              '例外処理'
            ]
          },
          businessStates: {
            initial: 'ポリシー策定中',
            states: ['ポリシー策定中', '適用中', '更新中'],
            final: '適用中'
          }
        },
        {
          name: 'multi-factor-authentication',
          displayName: '多要素認証を実施する',
          pattern: 'Workflow',
          goal: '高度なセキュリティ脅威からの保護',
          design: `# ビジネスオペレーション: 多要素認証を実施する

## 目的
パスワードだけに依存しない多層防御により、アカウント乗っ取りを防止する

## 関係者とロール
- **ユーザー**: 認証の実行
- **システム管理者**: MFA設定支援
- **セキュリティ管理者**: ポリシー管理

## ビジネスオペレーション
1. **MFA有効化**: ユーザーによる設定
2. **デバイス登録**: 認証器の登録
3. **バックアップコード生成**: 緊急時の対策
4. **認証実行**: ログイン時の追加認証
5. **デバイス管理**: 紛失・変更時の対応

## KPI
- MFA有効化率: 95%以上
- 認証成功率: 99%以上
- 不正アクセス防止率: 100%`,
          roles: ['ユーザー', 'システム管理者', 'セキュリティ管理者'],
          operations: {
            steps: [
              'MFA有効化',
              'デバイス登録',
              'バックアップコード生成',
              '認証実行',
              'デバイス管理'
            ]
          },
          businessStates: {
            initial: '未設定',
            states: ['未設定', '設定中', '有効', '一時無効'],
            final: '有効'
          }
        }
      ]
    },
    {
      name: 'access-control',
      displayName: 'アクセスを制御する能力',
      description: 'ロールベースおよび属性ベースのアクセス制御により、適切な権限管理を実現する能力',
      category: 'Core',
      definition: `# ビジネスケーパビリティ: アクセスを制御する能力

## ケーパビリティ概要
最小権限の原則に基づき、ユーザーの役割と属性に応じた適切なアクセス権限を管理する能力

## ビジネス価値
- **セキュリティ強化**: 権限の適正化による情報漏洩リスクの低減
- **コンプライアンス**: 職務分掌の実現、監査対応の効率化
- **業務効率**: 必要な権限の迅速な付与、不要な制限の排除

## 実現する成果
- 権限関連インシデント: ゼロ
- 権限申請から付与まで: 2時間以内
- 権限棚卸し実施率: 100%（四半期毎）
- 監査指摘事項: ゼロ

## 必要な要素
### 人材・スキル
- アクセス制御スペシャリスト
- コンプライアンス管理者
- 権限管理オペレーター

### プロセス・方法論
- ロールベースアクセス制御(RBAC)
- 属性ベースアクセス制御(ABAC)
- 権限申請・承認ワークフロー
- 定期的権限棚卸しプロセス

### ツール・システム
- 統合権限管理システム
- ワークフロー管理システム
- 権限分析・可視化ツール`,
      businessOperations: [
        {
          name: 'role-assignment',
          displayName: 'ロールを割り当てる',
          pattern: 'Workflow',
          goal: '業務に必要な権限の迅速かつ適切な付与',
          design: `# ビジネスオペレーション: ロールを割り当てる

## 目的
ユーザーの職務・責任に応じた適切なロールを割り当て、業務遂行に必要な権限を付与する

## 関係者とロール
- **申請者**: ロール割り当ての要求
- **承認者（上司）**: 業務必要性の確認、承認
- **権限管理者**: ロールの割り当て実施
- **セキュリティ管理者**: ポリシー準拠の確認

## ビジネスオペレーション
1. **申請**: 必要なロールの申請、理由記載
2. **上司承認**: 業務上の必要性確認
3. **権限確認**: 既存権限との整合性チェック
4. **セキュリティレビュー**: ポリシー違反チェック
5. **ロール付与**: システムへの反映
6. **通知**: 申請者への完了通知

## 状態遷移
申請中 → 承認待ち → レビュー中 → 付与中 → 完了

## KPI
- 申請から付与まで: 2営業日以内
- 自動承認率: 80%（標準ロール）
- エラー率: 0.1%未満`,
          roles: ['申請者', '承認者（上司）', '権限管理者', 'セキュリティ管理者'],
          operations: {
            steps: [
              '申請',
              '上司承認',
              '権限確認',
              'セキュリティレビュー',
              'ロール付与',
              '通知'
            ]
          },
          businessStates: {
            initial: '申請中',
            states: ['申請中', '承認待ち', 'レビュー中', '付与中', '完了', '却下'],
            final: '完了'
          }
        },
        {
          name: 'permission-review',
          displayName: '権限を定期的に見直す',
          pattern: 'Analytics',
          goal: '不要権限の削除と権限の適正化',
          design: `# ビジネスオペレーション: 権限を定期的に見直す

## 目的
定期的な権限棚卸しにより、不要な権限を削除し、最小権限の原則を維持する

## 関係者とロール
- **部門長**: 部門メンバーの権限確認、承認
- **権限管理者**: 棚卸しの実施、分析
- **監査人**: 棚卸し結果の検証

## ビジネスオペレーション
1. **棚卸し計画**: 対象範囲、スケジュール設定
2. **権限抽出**: 現在の権限一覧作成
3. **妥当性確認**: 各権限の必要性確認
4. **是正措置**: 不要権限の削除、調整
5. **承認**: 部門長による最終承認
6. **報告**: 経営層への報告

## KPI
- 棚卸し実施率: 100%（四半期毎）
- 不要権限発見率: 10%以下
- 是正完了率: 100%
- 監査指摘: ゼロ`,
          roles: ['部門長', '権限管理者', '監査人'],
          operations: {
            steps: [
              '棚卸し計画',
              '権限抽出',
              '妥当性確認',
              '是正措置',
              '承認',
              '報告'
            ]
          },
          businessStates: {
            initial: '計画中',
            states: ['計画中', '実施中', '確認中', '是正中', '完了'],
            final: '完了'
          }
        },
        {
          name: 'segregation-of-duties',
          displayName: '職務を分掌する',
          pattern: 'Administration',
          goal: '内部統制強化とコンプライアンス遵守',
          design: `# ビジネスオペレーション: 職務を分掌する

## 目的
相反する職務の分離により、不正行為のリスクを低減し、内部統制を強化する

## 関係者とロール
- **コンプライアンス管理者**: SoDルール策定
- **権限管理者**: ルールの実装、監視
- **内部監査人**: 違反の検出、報告

## ビジネスオペレーション
1. **SoDルール定義**: 相反する職務の特定
2. **システム実装**: 自動制御の設定
3. **違反検知**: リアルタイム監視
4. **例外承認**: 業務上必要な例外処理
5. **定期レビュー**: ルールの見直し

## KPI
- SoD違反件数: ゼロ（例外承認除く）
- 例外承認率: 5%以下
- 検知から是正まで: 24時間以内`,
          roles: ['コンプライアンス管理者', '権限管理者', '内部監査人'],
          operations: {
            steps: [
              'SoDルール定義',
              'システム実装',
              '違反検知',
              '例外承認',
              '定期レビュー'
            ]
          },
          businessStates: {
            initial: 'ルール策定中',
            states: ['ルール策定中', '運用中', '違反検出', '是正中'],
            final: '運用中'
          }
        }
      ]
    },
    {
      name: 'audit-compliance',
      displayName: '監査証跡を管理する能力',
      description: '全てのアクセスと操作の証跡を記録し、監査要求に迅速に対応する能力',
      category: 'Supporting',
      definition: `# ビジネスケーパビリティ: 監査証跡を管理する能力

## ケーパビリティ概要
システムへのアクセスと重要な操作の全てを記録し、監査やインシデント調査に必要な証跡を提供する能力

## ビジネス価値
- **コンプライアンス**: 規制要件への準拠、監査対応の効率化
- **セキュリティ**: インシデントの早期発見、原因究明の迅速化
- **説明責任**: 操作の透明性確保、責任の明確化

## 実現する成果
- ログ取得率: 100%（重要操作）
- ログ保存期間: 7年間
- 監査対応時間: 1営業日以内
- ログ改ざん: 検出100%

## 必要な要素
### 人材・スキル
- ログ管理スペシャリスト
- フォレンジックアナリスト
- コンプライアンスオフィサー

### プロセス・方法論
- ログ収集・保存プロセス
- ログ分析・レポーティング
- インシデント調査手順

### ツール・システム
- ログ統合管理システム(SIEM)
- ログ長期保存ストレージ
- ログ分析・可視化ツール`,
      businessOperations: [
        {
          name: 'log-collection',
          displayName: 'ログを収集・保存する',
          pattern: 'Administration',
          goal: '完全で改ざん不可能な監査証跡の確保',
          design: `# ビジネスオペレーション: ログを収集・保存する

## 目的
システムの全ての重要な操作を漏れなく記録し、改ざん不可能な形で長期保存する

## 関係者とロール
- **システム管理者**: ログ収集設定
- **セキュリティ管理者**: ログポリシー管理
- **監査人**: ログの検証

## ビジネスオペレーション
1. **ログポリシー設定**: 収集対象、保存期間定義
2. **自動収集**: リアルタイムログ収集
3. **正規化**: 統一フォーマットへの変換
4. **暗号化保存**: 改ざん防止措置
5. **定期検証**: 完全性チェック

## KPI
- ログ取得率: 100%
- ログ欠損率: 0%
- 保存期間遵守率: 100%`,
          roles: ['システム管理者', 'セキュリティ管理者', '監査人'],
          operations: {
            steps: [
              'ログポリシー設定',
              '自動収集',
              '正規化',
              '暗号化保存',
              '定期検証'
            ]
          },
          businessStates: {
            initial: '設定中',
            states: ['設定中', '収集中', '保存済み', '検証中'],
            final: '保存済み'
          }
        },
        {
          name: 'audit-reporting',
          displayName: '監査レポートを作成する',
          pattern: 'Analytics',
          goal: '監査要求への迅速な対応',
          design: `# ビジネスオペレーション: 監査レポートを作成する

## 目的
監査人の要求に応じて、必要な期間・範囲のアクセスログと操作履歴を提供する

## 関係者とロール
- **監査人**: レポート要求、検証
- **コンプライアンス管理者**: レポート作成
- **セキュリティ管理者**: 内容確認

## ビジネスオペレーション
1. **要求受付**: 監査範囲、期間の確認
2. **ログ抽出**: 該当ログの検索、抽出
3. **分析・集計**: パターン分析、統計作成
4. **レポート作成**: 監査用フォーマット作成
5. **レビュー・提出**: 内容確認、提出

## KPI
- レポート作成時間: 1営業日以内
- 正確性: 100%
- 監査人満足度: 90%以上`,
          roles: ['監査人', 'コンプライアンス管理者', 'セキュリティ管理者'],
          operations: {
            steps: [
              '要求受付',
              'ログ抽出',
              '分析・集計',
              'レポート作成',
              'レビュー・提出'
            ]
          },
          businessStates: {
            initial: '要求受付',
            states: ['要求受付', '作成中', 'レビュー中', '提出済み'],
            final: '提出済み'
          }
        }
      ]
    }
  ]
}

export async function createSecureAccessData(serviceId: string) {
  console.log('  Creating Secure Access Service capabilities and operations...')
  
  let totalCapabilities = 0
  let totalOperations = 0
  
  for (const capData of secureAccessData.capabilities) {
    // ケーパビリティの作成
    const capability = await parasolDb.businessCapability.create({
      data: {
        serviceId,
        name: capData.name,
        displayName: capData.displayName,
        description: capData.description,
        definition: capData.definition,
        category: capData.category
      }
    })
    totalCapabilities++
    console.log(`    ✓ Created capability: ${capability.displayName}`)
    
    // ビジネスオペレーションの作成
    for (const opData of capData.businessOperations) {
      const operation = await parasolDb.businessOperation.create({
        data: {
          serviceId,
          capabilityId: capability.id,
          name: opData.name,
          displayName: opData.displayName,
          design: opData.design,
          pattern: opData.pattern,
          goal: opData.goal,
          roles: JSON.stringify(opData.roles),
          operations: JSON.stringify(opData.operations),
          businessStates: JSON.stringify(opData.businessStates),
          useCases: JSON.stringify([]),
          uiDefinitions: JSON.stringify({ pages: [] }),
          testCases: JSON.stringify({ criteria: opData.goal })
        }
      })
      totalOperations++
      console.log(`      ✓ Created operation: ${operation.displayName}`)
    }
  }
  
  return { capabilities: totalCapabilities, operations: totalOperations }
}