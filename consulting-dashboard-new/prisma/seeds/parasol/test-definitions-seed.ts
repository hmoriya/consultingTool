import { PrismaClient as ParasolPrismaClient } from '@prisma/parasol-client'

const parasolDb = new ParasolPrismaClient()

// テスト定義のMD形式（自然言語設計）
export const testDefinitionContents = {
  requirementGatheringTest: `# テスト定義：要求収集の正常動作確認

## テストの目的
要求収集フォームが正しく動作し、入力された情報が適切に保存されることを確認する

## テストケース：基本的な要求入力

### 事前条件
- プロジェクトマネージャーとしてログインしている
- 新規プロジェクトが作成されている
- ステークホルダーリストが登録されている

### テスト手順
1. プロジェクト一覧から対象プロジェクトを選択する
2. 「要求収集」ボタンをクリックする
3. インタビュー日時を本日の日付で入力する
4. ステークホルダーとして「経営企画部長」を選択する
5. インタビュー形式を「対面」に設定する
6. ビジネスゴールに「業務効率を30%向上させる」と入力する
7. 現状の課題に「手作業が多く、ミスが発生しやすい」と入力する
8. 期待される成果に「自動化により作業時間を削減」と入力する
9. 優先順位を「高」に設定する
10. 「下書き保存」ボタンをクリックする

### 期待結果
- 保存完了のメッセージが表示される
- 入力した内容がすべて保存されている
- 要求一覧画面に新しい要求が表示される
- ステータスが「下書き」になっている

## テストケース：必須項目の入力チェック

### 事前条件
- 要求収集フォームが表示されている

### テスト手順
1. 何も入力せずに「保存」ボタンをクリックする
2. エラーメッセージを確認する
3. 必須項目のみを入力する
4. 再度「保存」ボタンをクリックする

### 期待結果
- 必須項目が赤く強調表示される
- 「必須項目を入力してください」というメッセージが表示される
- 必須項目入力後は正常に保存される`,

  projectPlanCreationTest: `# テスト定義：プロジェクト計画作成機能

## テストの目的
プロジェクト計画の作成から承認までの一連の流れが正しく機能することを確認する

## テストケース：WBS作成と工数見積もり

### 事前条件
- プロジェクトマネージャーとしてログインしている
- 要求定義が完了している
- プロジェクト計画編集画面が表示されている

### テスト手順
1. 「新規タスク追加」ボタンをクリックする
2. タスク名に「要件定義書作成」と入力する
3. 親タスクとして「要件定義フェーズ」を選択する
4. 工数見積もりに「40時間」と入力する
5. 担当者候補を選択する
6. タスクを保存する
7. 同様に5つのタスクを追加する
8. タスク間の依存関係を設定する
9. 全体のスケジュールを確認する

### 期待結果
- タスクが階層構造で表示される
- 工数の合計が自動計算される
- ガントチャートにタスクが表示される
- クリティカルパスが赤色で強調される
- 依存関係が矢印で表現される

## テストケース：リソース過負荷の警告

### 事前条件
- WBSが作成されている
- リソース計画タブが選択されている

### テスト手順
1. 一人の担当者に複数のタスクを割り当てる
2. 同時期に実行されるタスクの工数を増やす
3. 稼働率のグラフを確認する
4. 警告メッセージを確認する

### 期待結果
- 稼働率が100%を超える期間が赤く表示される
- 「リソースが過負荷です」という警告が出る
- 該当する担当者と期間が明示される
- 調整案が提示される`,

  progressCollectionTest: `# テスト定義：進捗収集と可視化

## テストの目的
プロジェクトメンバーからの進捗報告が正しく集計され、ダッシュボードに反映されることを確認する

## テストケース：進捗率の更新と反映

### 事前条件
- チームメンバーとしてログインしている
- 担当タスクが割り当てられている
- 進捗入力画面が表示されている

### テスト手順
1. 担当タスク一覧から一つ目のタスクを選択する
2. 進捗率を「0%」から「50%」に変更する
3. 実績工数に「20時間」と入力する
4. 進捗コメントに「設計完了、実装開始」と記入する
5. 「更新」ボタンをクリックする
6. 二つ目のタスクも同様に更新する
7. ダッシュボード画面に移動する
8. 全体進捗率を確認する

### 期待結果
- 個別タスクの進捗が保存される
- 全体進捗率が自動的に再計算される
- ダッシュボードにリアルタイムで反映される
- 進捗履歴が記録される
- コメントが表示される

## テストケース：遅延タスクのアラート

### 事前条件
- プロジェクトマネージャーとしてログインしている
- 複数のタスクに遅延が発生している

### テスト手順
1. 進捗ダッシュボードを開く
2. 「遅延タスクのみ表示」フィルターを適用する
3. 遅延理由を確認する
4. 対応策を検討する

### 期待結果
- 遅延タスクが赤色で強調表示される
- 遅延日数が表示される
- 影響を受ける後続タスクが明示される
- アクションが必要な項目がリストアップされる`,

  resourceAllocationTest: `# テスト定義：リソース要求と配置

## テストの目的
リソース要求から最適配置までのプロセスが正しく動作することを確認する

## テストケース：スキルマッチングによる候補者提示

### 事前条件
- プロジェクトマネージャーとしてログインしている
- リソース要求フォームが表示されている
- 複数のコンサルタントがシステムに登録されている

### テスト手順
1. 必要なスキルとして「Java」「設計経験5年以上」を選択する
2. 期間を「3ヶ月」に設定する
3. 稼働率を「80%」に設定する
4. 優先度を「高」にする
5. 「候補者検索」ボタンをクリックする
6. 提示された候補者リストを確認する
7. 最適な候補者を選択する
8. リソース要求を送信する

### 期待結果
- スキルにマッチする候補者が表示される
- 各候補者の現在の稼働状況が表示される
- マッチ度がパーセンテージで表示される
- 選択した候補者の情報が要求に含まれる
- リソースマネージャーに通知が送信される`,

  knowledgeRecordingTest: `# テスト定義：ナレッジ記録と公開

## テストの目的
プロジェクトの知識が適切に記録され、組織内で共有されることを確認する

## テストケース：ナレッジ記事の作成と公開

### 事前条件
- コンサルタントとしてログインしている
- プロジェクトが完了フェーズにある
- ナレッジエディターが表示されている

### テスト手順
1. タイトルに「アジャイル導入における成功要因」と入力する
2. カテゴリを「プロジェクト管理」に設定する
3. 本文エリアに以下を記入する：
   - 背景と課題
   - 実施したアプローチ
   - 得られた成果
   - 学んだ教訓
4. 関連プロジェクトを選択する
5. タグに「アジャイル」「変革」を追加する
6. 「下書き保存」をクリックする
7. 「レビュー依頼」をクリックする
8. レビュー承認後、「公開」をクリックする

### 期待結果
- 記事が下書きとして保存される
- レビュアーに通知が送信される
- 承認後、記事が公開される
- 検索で記事が見つかる
- 関連記事として表示される

## テストケース：重複チェック機能

### 事前条件
- 類似のナレッジ記事が既に存在している

### テスト手順
1. 既存記事と類似したタイトルを入力する
2. 同じカテゴリを選択する
3. 類似キーワードを含む本文を入力する
4. 「重複チェック」機能を実行する

### 期待結果
- 類似記事の一覧が表示される
- 類似度がパーセンテージで表示される
- 既存記事の更新か新規作成かを選択できる
- 適切な判断の支援情報が提供される`
}

// テスト定義の作成
export async function createTestDefinitions(useCases: any[]) {
  console.log('  Creating test definitions...')

  const testDefinitions = []

  // 各ユースケースに対してテスト定義を作成
  const testMappings = [
    { ucName: 'GatherRequirements', testName: 'RequirementGatheringTest', displayName: '要求収集の正常動作確認' },
    { ucName: 'CreateProjectPlan', testName: 'ProjectPlanCreationTest', displayName: 'プロジェクト計画作成機能' },
    { ucName: 'CollectProgress', testName: 'ProgressCollectionTest', displayName: '進捗収集と可視化' },
    { ucName: 'RequestResource', testName: 'ResourceAllocationTest', displayName: 'リソース要求と配置' },
    { ucName: 'RecordKnowledge', testName: 'KnowledgeRecordingTest', displayName: 'ナレッジ記録と公開' }
  ]

  for (const mapping of testMappings) {
    const useCase = useCases.find(uc => uc.name === mapping.ucName)
    if (useCase) {
      testDefinitions.push({
        useCaseId: useCase.id,
        name: mapping.testName,
        displayName: mapping.displayName,
        description: `${mapping.displayName}のテスト定義`,
        testType: 'integration',
        testCases: JSON.stringify([]),
        expectedResults: JSON.stringify([]),
        testData: JSON.stringify({})
      })
    }
  }

  const createdTestDefs = []
  for (const testDef of testDefinitions) {
    const created = await parasolDb.testDefinition.create({
      data: testDef
    })
    createdTestDefs.push(created)
  }

  return createdTestDefs
}